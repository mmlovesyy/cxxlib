!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
CC	Makefile	/^CC=g++$/;"	m
CXXFLAGS	Makefile	/^CXXFLAGS = -Wall -g $/;"	m
OBJS	Makefile	/^OBJS = $(patsubst %.cpp, %.o,$(SOUCE_FILES))$/;"	m
PRG	Makefile	/^PRG=splay$/;"	m
SOUCE_FILES	Makefile	/^SOUCE_FILES = $(wildcard *.cpp)$/;"	m
SPLAY_TREE	splay_tree.h	22;"	d
comp	splay_tree.h	/^		Comp comp;$/;"	m	class:splay_tree
empty	splay_tree.h	/^		bool empty( ) const { return root == 0; }$/;"	f	class:splay_tree
erase	splay_tree.h	/^		void erase( const T &key ) {$/;"	f	class:splay_tree
find	splay_tree.h	/^		node<T>* find( const T &key ) {$/;"	f	class:splay_tree
insert	splay_tree.h	/^		void insert( const T &key ) {$/;"	f	class:splay_tree
insertSeq	main.cpp	/^void insertSeq(splay_tree<int> &st, int arr[], int n){$/;"	f
key	splay_tree.h	/^	T key;$/;"	m	struct:node
left	splay_tree.h	/^	node<T> *left, *right;$/;"	m	struct:node
left_rotate	splay_tree.h	/^		void left_rotate( node<T> *x ) {$/;"	f	class:splay_tree
main	main.cpp	/^int main(){$/;"	f
maximum	splay_tree.h	/^		const T& maximum( ) { return subtree_maximum( root )->key; }$/;"	f	class:splay_tree
minimum	splay_tree.h	/^		const T& minimum( ) { return subtree_minimum( root )->key; }$/;"	f	class:splay_tree
node	splay_tree.h	/^	node( const T& init = T( ) ) : left( 0 ), right( 0 ), parent( 0 ), key( init ) { }$/;"	f	struct:node
node	splay_tree.h	/^template <typename T> struct node {$/;"	s
p_size	splay_tree.h	/^		unsigned long p_size;$/;"	m	class:splay_tree
parent	splay_tree.h	/^	node<T> *parent;$/;"	m	struct:node
replace	splay_tree.h	/^		void replace( node<T> *u, node<T> *v ) {$/;"	f	class:splay_tree
right	splay_tree.h	/^	node<T> *left, *right;$/;"	m	struct:node
right_rotate	splay_tree.h	/^		void right_rotate( node<T> *x ) {$/;"	f	class:splay_tree
root	splay_tree.h	/^		node<T> *root;$/;"	m	class:splay_tree
size	splay_tree.h	/^		unsigned long size( ) const { return p_size; }$/;"	f	class:splay_tree
splay	splay_tree.h	/^		void splay( node<T> *x ) {$/;"	f	class:splay_tree
splay_tree	splay_tree.h	/^		splay_tree() :  p_size( 0 ),  root( 0 ) { }$/;"	f	class:splay_tree
splay_tree	splay_tree.h	/^class splay_tree {$/;"	c
subtree_maximum	splay_tree.h	/^		node<T> * subtree_maximum( node<T> *u ) {$/;"	f	class:splay_tree
subtree_minimum	splay_tree.h	/^		node<T> * subtree_minimum( node<T> *u ) {$/;"	f	class:splay_tree
